# -*- coding: utf-8 -*-
"""api_research.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vdm5IWIqOsTlp-C41DOoyLqhGmzyJp7p
"""

# add your personal NewsAPI key at the start here
from google.colab import userdata


NEWS_API_KEY = userdata.get('NEWS_API_KEY')

#from google.colab import drive
#from google.oauth2 import service_account

#drive.mount('/content/drive')

#import os

#os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = userdata.get('GOOGLE_APPLICATION_CREDENTIALS')
from google.colab import userdata
import os
import json
import firebase_admin
from firebase_admin import credentials, firestore

# Retrieve the service account key from Colab Secrets
service_account_info = userdata.get('FIRESTORE_SERVICE_ACCOUNT_KEY')


firestone_key_json = {
  "type": "service_account",
  "project_id": userdata.get('FIRESTORE_PROJECT_ID'),
  "private_key_id": userdata.get('FIRESTORE_SERVICE_ACCOUNT_KEY'),
  "private_key": userdata.get('FIRESTORE_PRIVATE_KEY'),
  "client_email": userdata.get('FIRESTORE_CLIENT_EMAIL'),
  "client_id": userdata.get('FIRESTORE_CLIENT_ID'),
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/sentiment%40commanding-fact-465100-c6.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}


service_account_json_str = json.dumps(firestone_key_json)

print(service_account_json_str)
if service_account_json_str is None:
    raise ValueError("Environment variable FIRESTORE_SERVICE_ACCOUNT_KEY is not set!")

with open("service_account.json", "w") as f:
    f.write(service_account_json_str)

# Set the environment variable for authentication
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "service_account.json"

import os
import json
import requests
from datetime import datetime, timedelta, timezone
from dateutil import parser as date_parser
import yfinance as yf
import firebase_admin
from firebase_admin import credentials, firestore

# ---------------------------
# Setup Firestore Credentials
# ---------------------------

def setup_firestore():
    # Load credentials from environment or file
    service_account_json = ""

    with open(os.environ.get("GOOGLE_APPLICATION_CREDENTIALS"), 'r') as file:
        service_account_json = file.read()
        print("service_account_json: " + service_account_json)

    if not service_account_json:
        raise ValueError("GOOGLE_APPLICATION_CREDENTIALS is not set!")

    cred_dict = json.loads(service_account_json)
    cred = credentials.Certificate(cred_dict)

    if not firebase_admin._apps:
        firebase_admin.initialize_app(cred)

    #return firestore.Client(project="sentiment-analysis-379200", database="sentiment-analysis-api-research")
    return firestore.client()

# ---------------------------
# Price & Volume from Yahoo
# ---------------------------

def get_price_volume(ticker_symbol):
    ticker = yf.Ticker(ticker_symbol)
    todays_data = ticker.history(period='1d')

    if not todays_data.empty:
        price = todays_data['Close'].iloc[0]
        volume = todays_data['Volume'].iloc[0]
        return {
            "Ticker": ticker_symbol,
            "Price": round(price, 2),
            "Volume": int(volume)
        }
    else:
        return {
            "Ticker": ticker_symbol,
            "Error": "No data found"
        }

# ---------------------------
# NewsAPI
# ---------------------------

def get_newsapi_news(company_name, api_key, since_24h):
    url = "https://newsapi.org/v2/top-headlines"
    params = {
        'q': company_name,
        'apiKey': api_key,
        'category': 'business',
        'language': 'en'
    }
    response = requests.get(url, params=params)

    if response.status_code == 200:
        res = response.json()
        return [
            {
                "source": 'NewsAPI',
                "title": a.get("title", ""),
                "description": a.get("description", ""),
                "url": a.get("url", ""),
                "datetime": date_parser.parse(a["publishedAt"])
            }
            for a in res.get('articles', [])
            if date_parser.parse(a['publishedAt']) > since_24h
        ]
    else:
        print(f"[NewsAPI] Error: {response.status_code} - {response.text}")
        return []

# ---------------------------
# Yahoo Finance News
# ---------------------------

def get_yfinance_news(ticker, since_24h):
    try:
        stock = yf.Ticker(ticker)
        news_items = stock.news
        valid_news = []
        for n in news_items:
            c = n.get('content')
            if not c:
                continue
            timestamp = c.get('pubDate')
            if timestamp:
                dt = date_parser.isoparse(timestamp)
                if dt > since_24h:
                    valid_news.append({
                        'source': 'Yahoo Finance',
                        'title': c['title'],
                        'description': c.get('summary', c['title']),
                        'url': c.get('link', ''),
                        'datetime': dt
                    })
        return valid_news
    except Exception as e:
        print(f"[yfinance] Error for {ticker}: {e}")
        return []

# ---------------------------
# Combine All News
# ---------------------------

def get_all_news(name, ticker, newsapi_key, since_24h):
    return sorted(
        get_yfinance_news(ticker, since_24h) +
        get_newsapi_news(name, newsapi_key, since_24h),
        key=lambda x: x['datetime'], reverse=True
    )

# ---------------------------
# Firestore Save
# ---------------------------

def save_price_to_firestore(db, ticker, price_data, date_str):
    if "Error" in price_data:
        print(f"[⚠️] Skipping price for {ticker}: {price_data['Error']}")
        return
    ref = db.collection("Dailyprices").document(f"{ticker}_{date_str}")
    print(f"[ℹ️] Saving price for {ticker} on {price_data}")
    ref.set({
        "Date": date_str,
        "price": price_data["Price"],
        "ticker": ticker,
        "volume": price_data["Volume"]
    })
    print(f"[✅] Price saved for {ticker}")

def save_news_to_firestore(db, ticker, news_items, date_str):
    for a in news_items:
        try:
            text = a.get("description") or a.get("title", "")
            paragraphs = [s.strip() for s in text.split(".") if s.strip()]
            doc_id = f"{ticker}_{abs(hash(a.get('title', '')))}"
            db.collection("NewsArticles").document(doc_id).set({
                "date": date_str,
                "ticker": ticker,
                "title": a.get("title", ""),
                "url": a.get("url", ""),
                "paragraphs": paragraphs
            })
        except Exception as e:
            print(f"[❌] Failed to save article: {e}")
    print(f"[✅] Saved {len(news_items)} articles for {ticker}")

# ---------------------------
# Main Function
# ---------------------------

def main():
    # Config
    companies = [
        {"Name": "Meta Platforms, Inc.", "Ticker": "META"},
        {"Name": "M&T Bank Corporation", "Ticker": "MTB"},
        {"Name": "Thomson Reuters Corporation", "Ticker": "TRI"}
    ]

    newsapi_key = os.environ.get("NEWS_API_KEY")
    if not newsapi_key:
        raise ValueError("Missing NEWS_API_KEY env variable")

    db = setup_firestore()

    now = datetime.now(timezone.utc)
    since_24h = now - timedelta(hours=24)
    date_str = now.strftime("%Y-%m-%d")

    for company in companies:
        name = company["Name"]
        ticker = company["Ticker"]

        print(f"\n=== Processing {name} ({ticker}) ===")
        price_data = get_price_volume(ticker)
        save_price_to_firestore(db, ticker, price_data, date_str)

        news_data = get_all_news(name, ticker, newsapi_key, since_24h)
        save_news_to_firestore(db, ticker, news_data, date_str)

if __name__ == "__main__":
    os.environ["NEWS_API_KEY"] = userdata.get('NEWS_API_KEY')
    os.environ["GOOGLE_APPLICATION_CREDENTIALS_JSON"] = "service_account.json"



    main()

# create an array of company data - Name, Ticker, Sector
companies = [
    {"Name": "M&T Bank Corporation", "Ticker": "MTB", "Sector": "BANKS"},
    #{"Name": "Huntington Bancshares Inc", "Ticker": "HBAN", "Sector": "BANKS"},
    #{"Name": "Regions Financial corporation", "Ticker": "RF", "Sector": "BANKS"},
    #{"Name": "New York Community Bancorp, Inc.", "Ticker": "NYCB", "Sector": "BANKS"},
    #{"Name": "Zions Bancorporation", "Ticker": "ZION", "Sector": "BANKS"},
    #{"Name": "Comerica Incorporated", "Ticker": "CMA", "Sector": "BANKS"},
    #{"Name": "First Horizon Corporation", "Ticker": "FHN", "Sector": "BANKS"},
    #{"Name": "Webster Financial Corporation", "Ticker": "WBS", "Sector": "BANKS"},
    #{"Name": "Western Alliance Bancorporation", "Ticker": "WAL", "Sector": "BANKS"},
    #{"Name": "Valley National Bancorp", "Ticker": "VLY", "Sector": "BANKS"},
    #{"Name": "Synovus Financial", "Ticker": "SNV", "Sector": "BANKS"},
    #{"Name": "Wintrust Financial corporation", "Ticker": "WTFC", "Sector": "BANKS"},
    #{"Name": "Cullen/Frost Bankers, Inc.", "Ticker": "CFR", "Sector": "BANKS"},
    #{"Name": "BOK Financial Corporation", "Ticker": "BOKF", "Sector": "BANKS"},
    #{"Name": "Old National Bancorp", "Ticker": "ONB", "Sector": "BANKS"},
    #{"Name": "F.N.B. Corporation", "Ticker": "FNB", "Sector": "BANKS"},
    #{"Name": "Oracle Corporation", "Ticker": "ORCL", "Sector": "TECHNOLOGY"},
    #{"Name": "Alphabet Inc.", "Ticker": "GOOGL", "Sector": "TECHNOLOGY"},
    {"Name": "Meta Platforms, Inc.", "Ticker": "META", "Sector": "TECHNOLOGY"},
    #{"Name": "Microsoft Corporation", "Ticker": "MSFT", "Sector": "TECHNOLOGY"},
    #{"Name": "Amazon.com, Inc.", "Ticker": "AMZN", "Sector": "TECHNOLOGY"},
    #{"Name": "ServiceNow, Inc.", "Ticker": "NOW", "Sector": "TECHNOLOGY"},
    #{"Name": "Salesforce, Inc.", "Ticker": "CRM", "Sector": "TECHNOLOGY"},
    #{"Name": "Adobe Inc.", "Ticker": "ADBE", "Sector": "TECHNOLOGY"},
    #{"Name": "AppLovin Corporation", "Ticker": "APP", "Sector": "TECHNOLOGY"},
    #{"Name": "Palantir Technologies Inc.", "Ticker": "PLTR", "Sector": "TECHNOLOGY"},
    #{"Name": "Intuit Inc.", "Ticker": "INTU", "Sector": "TECHNOLOGY"},
    #{"Name": "Accenture plc", "Ticker": "ACN", "Sector": "TECHNOLOGY"},
    {"Name": "Thomson Reuters Corporation Common Shares", "Ticker": "TRI", "Sector": "TECHNOLOGY"}
]

# create an array of Topics:
keywords = [
    {"Keyword": "AI Agent", "Category": "AI", "Sector": "TECHNOLOGY"},
    {"Keyword": "LLM", "Category": "AI", "Sector": "TECHNOLOGY"},
    {"Keyword": "Model Training", "Category": "AI", "Sector": "TECHNOLOGY"},
    {"Keyword": "AI Inference", "Category": "AI", "Sector": "TECHNOLOGY"},
    {"Keyword": "AI Monetization", "Category": "AI", "Sector": "TECHNOLOGY"},
    {"Keyword": "AI software functionality", "Category": "AI", "Sector": "TECHNOLOGY"},
    {"Keyword": "Customer service", "Category": "Customer Service", "Sector": "BANKS"},
    {"Keyword": "Bank fees", "Category": "fees", "Sector": "BANKS"}
]

# Given a ticker symbol, retrieve today's Price, Volume from Yahoo Finance as a dictionary value.
import yfinance as yf

def get_price_volume(ticker_symbol):
    ticker = yf.Ticker(ticker_symbol)
    todays_data = ticker.history(period='1d')

    if not todays_data.empty:
        price = todays_data['Close'].iloc[0]
        volume = todays_data['Volume'].iloc[0]
        return {
            "Ticker": ticker_symbol,
            "Price": round(price, 2),
            "Volume": int(volume)
        }
    else:
        return {
            "Ticker": ticker_symbol,
            "Error": "No data found"
        }

import requests
from datetime import date
from datetime import datetime, timedelta
from dateutil import parser as date_parser
from datetime import timezone

now = datetime.now(timezone.utc)
since_24h = now - timedelta(hours=24)


def get_newsapi_news(company_name):
    url = "https://newsapi.org/v2/top-headlines"
    #url = "https://newsapi.org/v2/everything"

    params = {
        'q': company_name,
        'apiKey': NEWS_API_KEY, #add previous key from first line,
        'category': 'business',
        'language': 'en'
    }

    response = requests.get(url, params=params)

    if response.status_code == 200:
        res = response.json()
        return [
            {
              "source": 'NewsAPI - ' + a['source']['name'],
              "title": a["title"],
              "description": a["description"],
              "url": a["url"],
              "datetime": date_parser.parse(a["publishedAt"])
            }
            for a in res.get('articles', [])
            if date_parser.parse(a['publishedAt']) > since_24h
        ]
    else:
        return [{"error": f"Request failed with status {response.status_code}: {response.text}"}]

from dateutil import parser

def get_yfinance_news(ticker):
    try:
        stock = yf.Ticker(ticker)
        news_items = stock.news
        valid_news = []
        for n in news_items:
            try:
                c = n.get('content')
                if not c:
                    continue
                timestamp = c.get('pubDate')
                if timestamp:
                    dt = parser.isoparse(timestamp)

                    if dt > since_24h:
                        valid_news.append({
                            'source': 'Yahoo Finance',
                            'title': c['title'],
                            'summary': c['summary'],
                            'datetime': dt
                        })

            except Exception as inner_e:
                print(f"[yfinance] Skipped 1 article due to error: {inner_e}")
        return valid_news
    except Exception as e:
        print(f"[yfinance] Error for {ticker}: {e}")
        return []

import requests
from datetime import datetime, timedelta, timezone

ALPACA_KEY = 'your_alpaca_api_key'
ALPACA_SECRET = 'your_alpaca_secret_key'

def get_alpaca_news(ticker):
    url = "https://data.alpaca.markets/v1beta1/news"

    now = datetime.now(timezone.utc)
    since_24h = now - timedelta(hours=24)

    params = {
        "symbols": ticker,
        "start": since_24h.isoformat(),
        "end": now.isoformat(),
        "limit": 50
    }

    headers = {
        "APCA-API-KEY-ID": userdata.get('ALPACA_KEY'),
        "APCA-API-SECRET-KEY": userdata.get('ALPACA_SECRET')
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        news_items = response.json().get("news", [])

        results = []
        for item in news_items:
            published = datetime.fromisoformat(item["created_at"].replace("Z", "+00:00"))
            results.append({
                "source": "Alpaca",
                "title": item["headline"],
                "url": item["url"],
                "datetime": published
            })
        return results

    except Exception as e:
        print(f"[Alpaca] Error fetching news for {ticker}: {e}")
        return []

def get_all_news(ticker):
    all_news = (
        get_yfinance_news(ticker) +
        get_alpaca_news(ticker) +
        get_newsapi_news(ticker)
    )

    # Sort by datetime descending
    return sorted(all_news, key=lambda x: x['datetime'], reverse=True)

def save_news_to_firestore(ticker, articles, price):
    db = firestore.Client(project="sentiment-analysis-379200", database="sentiment-analysis-api-research")
    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    doc_ref = db.collection('stock_news').document(ticker).collection('by_date').document(today_str)

    article_list = [{
        'title': a['title'],
        'source': a['source'],
        'published': a['datetime'].isoformat()
    } for a in articles]

    try:
        doc_ref.set({
            'price': price,
            'articles': article_list
        })
        print(f"[✅] Saved {len(article_list)} articles for {ticker} on {today_str} with price ${price}")
    except Exception as e:
        print(f"[❌] Firestore write failed for {ticker} on {today_str}: {e}")

#get_all_news("META")

!pip install pymongo

# prompt: for each company in companies, get its get_price_volume and company news

for company in companies:
    ticker = company["Ticker"]
    name = company["Name"]

    price_volume_data = get_price_volume(ticker)
    print(f"Data for {name} ({ticker}): {price_volume_data}")

    news_data = get_all_news(ticker)
    print(f"News for {name}: {news_data}")
    print("-" * 30) # Separator for clarity

    save_news_to_firestore(ticker, news_data, price_volume_data)
    #save_news_to_mongodb(ticker, price_volume_data, news_data)